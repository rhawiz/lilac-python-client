# coding: utf-8

"""
    FDM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FDMAPIDTOV1CurveForecastSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'curve_id': 'int',
        'forecast_count': 'int',
        'min_forecast_date': 'datetime',
        'max_forecast_date': 'datetime'
    }

    attribute_map = {
        'curve_id': 'curveID',
        'forecast_count': 'forecastCount',
        'min_forecast_date': 'minForecastDate',
        'max_forecast_date': 'maxForecastDate'
    }

    def __init__(self, curve_id=None, forecast_count=None, min_forecast_date=None, max_forecast_date=None):  # noqa: E501
        """FDMAPIDTOV1CurveForecastSummary - a model defined in Swagger"""  # noqa: E501
        self._curve_id = None
        self._forecast_count = None
        self._min_forecast_date = None
        self._max_forecast_date = None
        self.discriminator = None
        if curve_id is not None:
            self.curve_id = curve_id
        if forecast_count is not None:
            self.forecast_count = forecast_count
        if min_forecast_date is not None:
            self.min_forecast_date = min_forecast_date
        if max_forecast_date is not None:
            self.max_forecast_date = max_forecast_date

    @property
    def curve_id(self):
        """Gets the curve_id of this FDMAPIDTOV1CurveForecastSummary.  # noqa: E501


        :return: The curve_id of this FDMAPIDTOV1CurveForecastSummary.  # noqa: E501
        :rtype: int
        """
        return self._curve_id

    @curve_id.setter
    def curve_id(self, curve_id):
        """Sets the curve_id of this FDMAPIDTOV1CurveForecastSummary.


        :param curve_id: The curve_id of this FDMAPIDTOV1CurveForecastSummary.  # noqa: E501
        :type: int
        """

        self._curve_id = curve_id

    @property
    def forecast_count(self):
        """Gets the forecast_count of this FDMAPIDTOV1CurveForecastSummary.  # noqa: E501


        :return: The forecast_count of this FDMAPIDTOV1CurveForecastSummary.  # noqa: E501
        :rtype: int
        """
        return self._forecast_count

    @forecast_count.setter
    def forecast_count(self, forecast_count):
        """Sets the forecast_count of this FDMAPIDTOV1CurveForecastSummary.


        :param forecast_count: The forecast_count of this FDMAPIDTOV1CurveForecastSummary.  # noqa: E501
        :type: int
        """

        self._forecast_count = forecast_count

    @property
    def min_forecast_date(self):
        """Gets the min_forecast_date of this FDMAPIDTOV1CurveForecastSummary.  # noqa: E501


        :return: The min_forecast_date of this FDMAPIDTOV1CurveForecastSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._min_forecast_date

    @min_forecast_date.setter
    def min_forecast_date(self, min_forecast_date):
        """Sets the min_forecast_date of this FDMAPIDTOV1CurveForecastSummary.


        :param min_forecast_date: The min_forecast_date of this FDMAPIDTOV1CurveForecastSummary.  # noqa: E501
        :type: datetime
        """

        self._min_forecast_date = min_forecast_date

    @property
    def max_forecast_date(self):
        """Gets the max_forecast_date of this FDMAPIDTOV1CurveForecastSummary.  # noqa: E501


        :return: The max_forecast_date of this FDMAPIDTOV1CurveForecastSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._max_forecast_date

    @max_forecast_date.setter
    def max_forecast_date(self, max_forecast_date):
        """Sets the max_forecast_date of this FDMAPIDTOV1CurveForecastSummary.


        :param max_forecast_date: The max_forecast_date of this FDMAPIDTOV1CurveForecastSummary.  # noqa: E501
        :type: datetime
        """

        self._max_forecast_date = max_forecast_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FDMAPIDTOV1CurveForecastSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FDMAPIDTOV1CurveForecastSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
