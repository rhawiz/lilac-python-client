# coding: utf-8

"""
    FDM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FDMAPIDTOV1CrudesCrudesRefineryProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'refinery_code': 'str',
        'product_name': 'str',
        'yield_volume_percent': 'float',
        'yield_weight_percent': 'float',
        'yield_weight_td': 'float',
        'source': 'str',
        'last_updated': 'datetime'
    }

    attribute_map = {
        'refinery_code': 'refineryCode',
        'product_name': 'productName',
        'yield_volume_percent': 'yieldVolumePercent',
        'yield_weight_percent': 'yieldWeightPercent',
        'yield_weight_td': 'yieldWeightTD',
        'source': 'source',
        'last_updated': 'lastUpdated'
    }

    def __init__(self, refinery_code=None, product_name=None, yield_volume_percent=None, yield_weight_percent=None, yield_weight_td=None, source=None, last_updated=None):  # noqa: E501
        """FDMAPIDTOV1CrudesCrudesRefineryProduct - a model defined in Swagger"""  # noqa: E501
        self._refinery_code = None
        self._product_name = None
        self._yield_volume_percent = None
        self._yield_weight_percent = None
        self._yield_weight_td = None
        self._source = None
        self._last_updated = None
        self.discriminator = None
        if refinery_code is not None:
            self.refinery_code = refinery_code
        if product_name is not None:
            self.product_name = product_name
        if yield_volume_percent is not None:
            self.yield_volume_percent = yield_volume_percent
        if yield_weight_percent is not None:
            self.yield_weight_percent = yield_weight_percent
        if yield_weight_td is not None:
            self.yield_weight_td = yield_weight_td
        if source is not None:
            self.source = source
        if last_updated is not None:
            self.last_updated = last_updated

    @property
    def refinery_code(self):
        """Gets the refinery_code of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501


        :return: The refinery_code of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :rtype: str
        """
        return self._refinery_code

    @refinery_code.setter
    def refinery_code(self, refinery_code):
        """Sets the refinery_code of this FDMAPIDTOV1CrudesCrudesRefineryProduct.


        :param refinery_code: The refinery_code of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :type: str
        """

        self._refinery_code = refinery_code

    @property
    def product_name(self):
        """Gets the product_name of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501


        :return: The product_name of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this FDMAPIDTOV1CrudesCrudesRefineryProduct.


        :param product_name: The product_name of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def yield_volume_percent(self):
        """Gets the yield_volume_percent of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501


        :return: The yield_volume_percent of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :rtype: float
        """
        return self._yield_volume_percent

    @yield_volume_percent.setter
    def yield_volume_percent(self, yield_volume_percent):
        """Sets the yield_volume_percent of this FDMAPIDTOV1CrudesCrudesRefineryProduct.


        :param yield_volume_percent: The yield_volume_percent of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :type: float
        """

        self._yield_volume_percent = yield_volume_percent

    @property
    def yield_weight_percent(self):
        """Gets the yield_weight_percent of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501


        :return: The yield_weight_percent of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :rtype: float
        """
        return self._yield_weight_percent

    @yield_weight_percent.setter
    def yield_weight_percent(self, yield_weight_percent):
        """Sets the yield_weight_percent of this FDMAPIDTOV1CrudesCrudesRefineryProduct.


        :param yield_weight_percent: The yield_weight_percent of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :type: float
        """

        self._yield_weight_percent = yield_weight_percent

    @property
    def yield_weight_td(self):
        """Gets the yield_weight_td of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501


        :return: The yield_weight_td of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :rtype: float
        """
        return self._yield_weight_td

    @yield_weight_td.setter
    def yield_weight_td(self, yield_weight_td):
        """Sets the yield_weight_td of this FDMAPIDTOV1CrudesCrudesRefineryProduct.


        :param yield_weight_td: The yield_weight_td of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :type: float
        """

        self._yield_weight_td = yield_weight_td

    @property
    def source(self):
        """Gets the source of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501


        :return: The source of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this FDMAPIDTOV1CrudesCrudesRefineryProduct.


        :param source: The source of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def last_updated(self):
        """Gets the last_updated of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501


        :return: The last_updated of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this FDMAPIDTOV1CrudesCrudesRefineryProduct.


        :param last_updated: The last_updated of this FDMAPIDTOV1CrudesCrudesRefineryProduct.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FDMAPIDTOV1CrudesCrudesRefineryProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FDMAPIDTOV1CrudesCrudesRefineryProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
