# coding: utf-8

"""
    FDM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CurveSummaryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_curve_forecast_curve_id_forecast_date_get(self, curve_id, forecast_date, **kwargs):  # noqa: E501
        """v1_curve_forecast_curve_id_forecast_date_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_curve_forecast_curve_id_forecast_date_get(curve_id, forecast_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curve_id: (required)
        :param datetime forecast_date: (required)
        :param datetime min_value_date:
        :param datetime max_value_date:
        :return: FDMAPIDTOV1CurveForecast
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_curve_forecast_curve_id_forecast_date_get_with_http_info(curve_id, forecast_date, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_curve_forecast_curve_id_forecast_date_get_with_http_info(curve_id, forecast_date, **kwargs)  # noqa: E501
            return data

    def v1_curve_forecast_curve_id_forecast_date_get_with_http_info(self, curve_id, forecast_date, **kwargs):  # noqa: E501
        """v1_curve_forecast_curve_id_forecast_date_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_curve_forecast_curve_id_forecast_date_get_with_http_info(curve_id, forecast_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curve_id: (required)
        :param datetime forecast_date: (required)
        :param datetime min_value_date:
        :param datetime max_value_date:
        :return: FDMAPIDTOV1CurveForecast
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curve_id', 'forecast_date', 'min_value_date', 'max_value_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_curve_forecast_curve_id_forecast_date_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'curve_id' is set
        if ('curve_id' not in params or
                params['curve_id'] is None):
            raise ValueError("Missing the required parameter `curve_id` when calling `v1_curve_forecast_curve_id_forecast_date_get`")  # noqa: E501
        # verify the required parameter 'forecast_date' is set
        if ('forecast_date' not in params or
                params['forecast_date'] is None):
            raise ValueError("Missing the required parameter `forecast_date` when calling `v1_curve_forecast_curve_id_forecast_date_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'curve_id' in params:
            path_params['CurveID'] = params['curve_id']  # noqa: E501
        if 'forecast_date' in params:
            path_params['ForecastDate'] = params['forecast_date']  # noqa: E501

        query_params = []
        if 'min_value_date' in params:
            query_params.append(('MinValueDate', params['min_value_date']))  # noqa: E501
        if 'max_value_date' in params:
            query_params.append(('MaxValueDate', params['max_value_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey-v1']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CurveForecast/{CurveID}/{ForecastDate}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FDMAPIDTOV1CurveForecast',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_curve_forecast_list_curve_id_get(self, curve_id, **kwargs):  # noqa: E501
        """v1_curve_forecast_list_curve_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_curve_forecast_list_curve_id_get(curve_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curve_id: (required)
        :param int scenario_id:
        :param datetime min_value_date:
        :param datetime max_value_date:
        :param datetime min_forecast_date:
        :param datetime max_forecast_date:
        :return: list[FDMAPIDTOV1CurveForecastScenario]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_curve_forecast_list_curve_id_get_with_http_info(curve_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_curve_forecast_list_curve_id_get_with_http_info(curve_id, **kwargs)  # noqa: E501
            return data

    def v1_curve_forecast_list_curve_id_get_with_http_info(self, curve_id, **kwargs):  # noqa: E501
        """v1_curve_forecast_list_curve_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_curve_forecast_list_curve_id_get_with_http_info(curve_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curve_id: (required)
        :param int scenario_id:
        :param datetime min_value_date:
        :param datetime max_value_date:
        :param datetime min_forecast_date:
        :param datetime max_forecast_date:
        :return: list[FDMAPIDTOV1CurveForecastScenario]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curve_id', 'scenario_id', 'min_value_date', 'max_value_date', 'min_forecast_date', 'max_forecast_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_curve_forecast_list_curve_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'curve_id' is set
        if ('curve_id' not in params or
                params['curve_id'] is None):
            raise ValueError("Missing the required parameter `curve_id` when calling `v1_curve_forecast_list_curve_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'curve_id' in params:
            path_params['CurveID'] = params['curve_id']  # noqa: E501

        query_params = []
        if 'scenario_id' in params:
            query_params.append(('ScenarioID', params['scenario_id']))  # noqa: E501
        if 'min_value_date' in params:
            query_params.append(('MinValueDate', params['min_value_date']))  # noqa: E501
        if 'max_value_date' in params:
            query_params.append(('MaxValueDate', params['max_value_date']))  # noqa: E501
        if 'min_forecast_date' in params:
            query_params.append(('MinForecastDate', params['min_forecast_date']))  # noqa: E501
        if 'max_forecast_date' in params:
            query_params.append(('MaxForecastDate', params['max_forecast_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey-v1']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CurveForecastList/{CurveID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FDMAPIDTOV1CurveForecastScenario]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_curve_scenario_curve_id_get(self, curve_id, **kwargs):  # noqa: E501
        """v1_curve_scenario_curve_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_curve_scenario_curve_id_get(curve_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curve_id: (required)
        :param datetime min_value_date:
        :param datetime max_value_date:
        :param datetime min_forecast_date:
        :param datetime max_forecast_date:
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_curve_scenario_curve_id_get_with_http_info(curve_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_curve_scenario_curve_id_get_with_http_info(curve_id, **kwargs)  # noqa: E501
            return data

    def v1_curve_scenario_curve_id_get_with_http_info(self, curve_id, **kwargs):  # noqa: E501
        """v1_curve_scenario_curve_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_curve_scenario_curve_id_get_with_http_info(curve_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curve_id: (required)
        :param datetime min_value_date:
        :param datetime max_value_date:
        :param datetime min_forecast_date:
        :param datetime max_forecast_date:
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curve_id', 'min_value_date', 'max_value_date', 'min_forecast_date', 'max_forecast_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_curve_scenario_curve_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'curve_id' is set
        if ('curve_id' not in params or
                params['curve_id'] is None):
            raise ValueError("Missing the required parameter `curve_id` when calling `v1_curve_scenario_curve_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'curve_id' in params:
            path_params['CurveID'] = params['curve_id']  # noqa: E501

        query_params = []
        if 'min_value_date' in params:
            query_params.append(('MinValueDate', params['min_value_date']))  # noqa: E501
        if 'max_value_date' in params:
            query_params.append(('MaxValueDate', params['max_value_date']))  # noqa: E501
        if 'min_forecast_date' in params:
            query_params.append(('MinForecastDate', params['min_forecast_date']))  # noqa: E501
        if 'max_forecast_date' in params:
            query_params.append(('MaxForecastDate', params['max_forecast_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey-v1']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CurveScenario/{CurveID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_curve_summary_forecasts_curve_id_get(self, curve_id, **kwargs):  # noqa: E501
        """v1_curve_summary_forecasts_curve_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_curve_summary_forecasts_curve_id_get(curve_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curve_id: (required)
        :param datetime value_date:
        :param datetime min_forecast_date:
        :param datetime max_forecast_date:
        :return: FDMAPIDTOV1CurveForecastSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_curve_summary_forecasts_curve_id_get_with_http_info(curve_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_curve_summary_forecasts_curve_id_get_with_http_info(curve_id, **kwargs)  # noqa: E501
            return data

    def v1_curve_summary_forecasts_curve_id_get_with_http_info(self, curve_id, **kwargs):  # noqa: E501
        """v1_curve_summary_forecasts_curve_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_curve_summary_forecasts_curve_id_get_with_http_info(curve_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curve_id: (required)
        :param datetime value_date:
        :param datetime min_forecast_date:
        :param datetime max_forecast_date:
        :return: FDMAPIDTOV1CurveForecastSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curve_id', 'value_date', 'min_forecast_date', 'max_forecast_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_curve_summary_forecasts_curve_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'curve_id' is set
        if ('curve_id' not in params or
                params['curve_id'] is None):
            raise ValueError("Missing the required parameter `curve_id` when calling `v1_curve_summary_forecasts_curve_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'curve_id' in params:
            path_params['CurveID'] = params['curve_id']  # noqa: E501

        query_params = []
        if 'value_date' in params:
            query_params.append(('ValueDate', params['value_date']))  # noqa: E501
        if 'min_forecast_date' in params:
            query_params.append(('MinForecastDate', params['min_forecast_date']))  # noqa: E501
        if 'max_forecast_date' in params:
            query_params.append(('MaxForecastDate', params['max_forecast_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey-v1']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CurveSummary/Forecasts/{CurveID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FDMAPIDTOV1CurveForecastSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_curve_summary_values_curve_id_get(self, curve_id, **kwargs):  # noqa: E501
        """v1_curve_summary_values_curve_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_curve_summary_values_curve_id_get(curve_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curve_id: (required)
        :param datetime min_forecast_date:
        :param datetime max_forecast_date:
        :return: FDMAPIDTOV1CurveValuesSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_curve_summary_values_curve_id_get_with_http_info(curve_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_curve_summary_values_curve_id_get_with_http_info(curve_id, **kwargs)  # noqa: E501
            return data

    def v1_curve_summary_values_curve_id_get_with_http_info(self, curve_id, **kwargs):  # noqa: E501
        """v1_curve_summary_values_curve_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_curve_summary_values_curve_id_get_with_http_info(curve_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int curve_id: (required)
        :param datetime min_forecast_date:
        :param datetime max_forecast_date:
        :return: FDMAPIDTOV1CurveValuesSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['curve_id', 'min_forecast_date', 'max_forecast_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_curve_summary_values_curve_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'curve_id' is set
        if ('curve_id' not in params or
                params['curve_id'] is None):
            raise ValueError("Missing the required parameter `curve_id` when calling `v1_curve_summary_values_curve_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'curve_id' in params:
            path_params['CurveID'] = params['curve_id']  # noqa: E501

        query_params = []
        if 'min_forecast_date' in params:
            query_params.append(('MinForecastDate', params['min_forecast_date']))  # noqa: E501
        if 'max_forecast_date' in params:
            query_params.append(('MaxForecastDate', params['max_forecast_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey-v1']  # noqa: E501

        return self.api_client.call_api(
            '/v1/CurveSummary/Values/{CurveID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FDMAPIDTOV1CurveValuesSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
