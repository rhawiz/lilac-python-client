# coding: utf-8

"""
    FDM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FDMAPIDTOV1PropCurveDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'curve_name': 'str',
        'commodity': 'str',
        'unit_of_measure': 'str',
        'value_frequency': 'str',
        'geography': 'str',
        'geography_to': 'str',
        'variable': 'str',
        'status': 'str',
        'time_zone': 'str',
        'source': 'str',
        'price_area': 'str',
        'issue_frequency': 'str',
        'facility': 'str',
        'fuel_technology': 'str',
        'short_name': 'str',
        'scenario_name': 'str',
        'methodology': 'str',
        'security_group': 'str'
    }

    attribute_map = {
        'curve_name': 'curveName',
        'commodity': 'commodity',
        'unit_of_measure': 'unitOfMeasure',
        'value_frequency': 'valueFrequency',
        'geography': 'geography',
        'geography_to': 'geographyTo',
        'variable': 'variable',
        'status': 'status',
        'time_zone': 'timeZone',
        'source': 'source',
        'price_area': 'priceArea',
        'issue_frequency': 'issueFrequency',
        'facility': 'facility',
        'fuel_technology': 'fuelTechnology',
        'short_name': 'shortName',
        'scenario_name': 'scenarioName',
        'methodology': 'methodology',
        'security_group': 'securityGroup'
    }

    def __init__(self, curve_name=None, commodity=None, unit_of_measure=None, value_frequency=None, geography=None, geography_to=None, variable=None, status=None, time_zone=None, source=None, price_area=None, issue_frequency=None, facility=None, fuel_technology=None, short_name=None, scenario_name=None, methodology=None, security_group=None):  # noqa: E501
        """FDMAPIDTOV1PropCurveDefinition - a model defined in Swagger"""  # noqa: E501
        self._curve_name = None
        self._commodity = None
        self._unit_of_measure = None
        self._value_frequency = None
        self._geography = None
        self._geography_to = None
        self._variable = None
        self._status = None
        self._time_zone = None
        self._source = None
        self._price_area = None
        self._issue_frequency = None
        self._facility = None
        self._fuel_technology = None
        self._short_name = None
        self._scenario_name = None
        self._methodology = None
        self._security_group = None
        self.discriminator = None
        if curve_name is not None:
            self.curve_name = curve_name
        if commodity is not None:
            self.commodity = commodity
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure
        if value_frequency is not None:
            self.value_frequency = value_frequency
        if geography is not None:
            self.geography = geography
        if geography_to is not None:
            self.geography_to = geography_to
        if variable is not None:
            self.variable = variable
        if status is not None:
            self.status = status
        if time_zone is not None:
            self.time_zone = time_zone
        if source is not None:
            self.source = source
        if price_area is not None:
            self.price_area = price_area
        if issue_frequency is not None:
            self.issue_frequency = issue_frequency
        if facility is not None:
            self.facility = facility
        if fuel_technology is not None:
            self.fuel_technology = fuel_technology
        if short_name is not None:
            self.short_name = short_name
        if scenario_name is not None:
            self.scenario_name = scenario_name
        if methodology is not None:
            self.methodology = methodology
        if security_group is not None:
            self.security_group = security_group

    @property
    def curve_name(self):
        """Gets the curve_name of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The curve_name of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._curve_name

    @curve_name.setter
    def curve_name(self, curve_name):
        """Sets the curve_name of this FDMAPIDTOV1PropCurveDefinition.


        :param curve_name: The curve_name of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._curve_name = curve_name

    @property
    def commodity(self):
        """Gets the commodity of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The commodity of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._commodity

    @commodity.setter
    def commodity(self, commodity):
        """Sets the commodity of this FDMAPIDTOV1PropCurveDefinition.


        :param commodity: The commodity of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._commodity = commodity

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The unit_of_measure of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this FDMAPIDTOV1PropCurveDefinition.


        :param unit_of_measure: The unit_of_measure of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def value_frequency(self):
        """Gets the value_frequency of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The value_frequency of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._value_frequency

    @value_frequency.setter
    def value_frequency(self, value_frequency):
        """Sets the value_frequency of this FDMAPIDTOV1PropCurveDefinition.


        :param value_frequency: The value_frequency of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._value_frequency = value_frequency

    @property
    def geography(self):
        """Gets the geography of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The geography of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._geography

    @geography.setter
    def geography(self, geography):
        """Sets the geography of this FDMAPIDTOV1PropCurveDefinition.


        :param geography: The geography of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._geography = geography

    @property
    def geography_to(self):
        """Gets the geography_to of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The geography_to of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._geography_to

    @geography_to.setter
    def geography_to(self, geography_to):
        """Sets the geography_to of this FDMAPIDTOV1PropCurveDefinition.


        :param geography_to: The geography_to of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._geography_to = geography_to

    @property
    def variable(self):
        """Gets the variable of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The variable of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """Sets the variable of this FDMAPIDTOV1PropCurveDefinition.


        :param variable: The variable of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._variable = variable

    @property
    def status(self):
        """Gets the status of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The status of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FDMAPIDTOV1PropCurveDefinition.


        :param status: The status of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def time_zone(self):
        """Gets the time_zone of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The time_zone of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this FDMAPIDTOV1PropCurveDefinition.


        :param time_zone: The time_zone of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def source(self):
        """Gets the source of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The source of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this FDMAPIDTOV1PropCurveDefinition.


        :param source: The source of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def price_area(self):
        """Gets the price_area of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The price_area of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._price_area

    @price_area.setter
    def price_area(self, price_area):
        """Sets the price_area of this FDMAPIDTOV1PropCurveDefinition.


        :param price_area: The price_area of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._price_area = price_area

    @property
    def issue_frequency(self):
        """Gets the issue_frequency of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The issue_frequency of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._issue_frequency

    @issue_frequency.setter
    def issue_frequency(self, issue_frequency):
        """Sets the issue_frequency of this FDMAPIDTOV1PropCurveDefinition.


        :param issue_frequency: The issue_frequency of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._issue_frequency = issue_frequency

    @property
    def facility(self):
        """Gets the facility of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The facility of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this FDMAPIDTOV1PropCurveDefinition.


        :param facility: The facility of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._facility = facility

    @property
    def fuel_technology(self):
        """Gets the fuel_technology of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The fuel_technology of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._fuel_technology

    @fuel_technology.setter
    def fuel_technology(self, fuel_technology):
        """Sets the fuel_technology of this FDMAPIDTOV1PropCurveDefinition.


        :param fuel_technology: The fuel_technology of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._fuel_technology = fuel_technology

    @property
    def short_name(self):
        """Gets the short_name of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The short_name of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this FDMAPIDTOV1PropCurveDefinition.


        :param short_name: The short_name of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def scenario_name(self):
        """Gets the scenario_name of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The scenario_name of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._scenario_name

    @scenario_name.setter
    def scenario_name(self, scenario_name):
        """Sets the scenario_name of this FDMAPIDTOV1PropCurveDefinition.


        :param scenario_name: The scenario_name of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._scenario_name = scenario_name

    @property
    def methodology(self):
        """Gets the methodology of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The methodology of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._methodology

    @methodology.setter
    def methodology(self, methodology):
        """Sets the methodology of this FDMAPIDTOV1PropCurveDefinition.


        :param methodology: The methodology of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._methodology = methodology

    @property
    def security_group(self):
        """Gets the security_group of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501


        :return: The security_group of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :rtype: str
        """
        return self._security_group

    @security_group.setter
    def security_group(self, security_group):
        """Sets the security_group of this FDMAPIDTOV1PropCurveDefinition.


        :param security_group: The security_group of this FDMAPIDTOV1PropCurveDefinition.  # noqa: E501
        :type: str
        """

        self._security_group = security_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FDMAPIDTOV1PropCurveDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FDMAPIDTOV1PropCurveDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
